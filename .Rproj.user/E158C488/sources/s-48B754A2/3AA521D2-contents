---
title: "2019-01-02"
output: html_notebook
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(dplyr); library(stringr); library(lubridate); library(purrr)
```

####Exercise5

# 1. 成績資料分析

資料引入：
```{r}
library(readr)
transcriptData <- read_csv("https://raw.githubusercontent.com/tpemartin/github-data/master/transcript100_102.csv",
                  col_types = cols(
                    學期成績="n"
                  ))
```

此資料為台北大學100-102學年入學學生之去識別化成績資料（入學年為資料中的**學屆**欄位）。

## 1.1 單一學號子樣本
取出學號edfeQ7fb8的子樣本：

```{r ans11}
transcriptData[transcriptData$學號=="edfeQ7fb8",]->subsample
```

```{r}
transcriptData%>%
  filter(學號=="edfeQ7fb8") -> subsample
```

## 1.2 總學分數
我們可以透過以下步驟計算他的「總修習學分數」及「總實得學分數」：

```{r}
subsample$學期成績 >= 60 -> subsample$及格 # 1
總修習學分數=sum(subsample$學分數) # 2
總實得學分數=sum(subsample$學分數[subsample$及格]) #3
```

請用dplyr函數改寫以上三個步驟：使用`mutate()`完成#1，接著用`summarise()`完成#2及#3
```{r ans12}
subsample %>%
  mutate(
    及格=(學期成績>=60)
  ) %>%
  summarise(
    總修習學分數=sum(學分數),
    總實得學分數=sum(學分數[及格])
  )

```

## 1.3 summarise應用

上述`summarise()`的最後輸出只會有「總修習學分數」及「總實得學分數」，若為方便讀者閱讀想讓最後輸出還有「學號」,我們可以在`summarise()`裡再加一行`學號=...`（...請自行判斷其程式內容）。

重寫上一題，但讓summarise輸出「學號」、「總修習學分數」、「總實得學分數」三項值。

```{r ans13}
subsample %>%
  mutate(
    及格=(學期成績>=60)
  ) %>%
  summarise(#最後會從全部資料獲得一個值
    學號=學號[1],
    總修習學分數=sum(學分數),
    總實得學分數=sum(學分數[及格])
  )
```

## 1.4 學分數計算函數

設計一個學分數計算函數稱之為totalCredits，當我們給它學號字串，它便會回傳給我們「學號」、「總修習學分數」、「總實得學分數」三項值。以上題為例,`totalCredits("edfeQ7fb8")`會回傳上題答案值。

```{r ans14}
totalCredits<-function(x){
  transcriptData[transcriptData$學號==x,]->subsample 
  #transcriptData %>%
    #filter(學號>=60) -> subsample%>%
  subsample %>%
    mutate(
      及格=(學期成績>=60)
    ) %>%
    summarise(
      學號=學號[1],
      總修習學分數=sum(學分數),
      總實得學分數=sum(學分數[及格])
    )  ->finalResult
  return(finalResult)
}
```

##算每個學生學分數
```{r}
transcriptData$"學號" %>% unique() %>%
  totalCredits()
```

```{r}
transcriptData$"學號" %>% unique() -> allStudentID

allStudent <-vector("list",length(allStudentID)) 
for ( i in seq_along(allStudentID)) {
  studentID_i <-  allStudentID[i]
  studentID_i %>% totalCredits()->
    allStudent[[i]]
}
#i <- 1
#studentID_i <-  allStudentID[i]
#studentID_i %>% totalCredits()
```


#map(x,function(x[i]))

```{r}
i<-3
totalCreditsOfStudent_i<-function(i){
  allStudentID[i] %>% totalCredits
}
answerList<-map(seq_along(allStudentID),totalCreditsOfStudent_i)
```

```{r}
map(allStudentID,totalCredits) -> answerList2
```


## 1.5 取出系別代號

學號的第5-6碼為此學生系別, 請在transcriptData新增**系別**欄位。
```{r ans15}
transcriptData$學號 %>% str_sub(5,6) -> transcriptData$系別
```


## 1.6 通識科目總類

找出此樣本中100學年第1學期學生所選通識科目有那幾種。最後一行程式請存在**通識科目總表**物件(class為character)裡，裡頭是「不重覆」的科目名稱。
（hint: 由於每個科目可以有很多學生修，取出每位學生修的通識會有不少重覆，此時可以用`unique()`函數去掉重複的部份即是完整的科目種類。）
```{r ans16}
(transcriptData$學年==100 & 
   transcriptData$學期==1 &
   transcriptData$`必選修類別（必∕選∕通）`=="通") -> filteredLogiIndex
transcriptData[filteredLogiIndex,]$科目名稱 %>% unique -> 通識科目總表
```

## 1.7 課堂學生系別背景多樣化

欲了解一堂課的學生系別背景多樣化，我們可進行生物學上的Shannon index計算，公式說明如下：

  1. 計算該堂課學生來自不同系別的比例，例如：有10個學生，3個來自A系，2個B系，5個C系，則比例為`c(3/10,2/10,5/10)`
  
  2. 假設p為此比例向量，則Shannon index為`-sum(p*log(p))`
  
我們用以下例子來了解上面的程式公式： 若`p <- c(0.3,0.2,0.5)`則`log(p)<-c(log(0.3),log(0.2),log(0.5))`且`p*log(p)`會是`c(0.3*log(0.3),0.2*log(0.2),0.5*log(0.5))`，`-sum`則把前者三元素值相加再取負號。

請建立一個函數稱之為shannon（s請用小寫），它的input argument x為課程學生的系別——給它一連串學生的系別，此函數便會計算出該課的學生系別背景多樣化指標值。
  
  
```{r ans17}
shannon<-function(x){
  x %>% table %>%
    {./sum(.)} -> p
  -sum(p*log(p)) -> ShannonIndex   
  return(ShannonIndex)
}
```


## 1.8 課程學生系別背景多樣化

請選出104學年第1學期有修通識科目ZT13的學生系別，再透過先前創造的`shannon()`來計算該課程的學生系別背景多樣性指標值（最後一行請讓螢幕出現此值）。
```{r ans18}
(transcriptData$學年==104 & 
   transcriptData$學期==1 & transcriptData$科目名稱=="ZT13") -> filteredLogiIndex
transcriptData$系別[filteredLogiIndex] %>% shannon
```


> Shannon index值越高表示學生系別背景越多樣化。





### Lazy evaluation

<http://adv-r.had.co.nz/Functions.html>

```{r}
b <- 3
examplefun <- function(a){
  a+b
}
examplefun(10)
```
```{r}
examplefun2 <- function(a,b){
  a+b
}
examplefun2(10,b)
```

```{r}
b <- c("aa","cc")
#examplefun(10)會不成功
```

##codetools

```{r}
library(codetools)
findGlobals(totalCredits)
```


```{r }
totalCredits2<-function(x,transcriptData){
  #transcriptData[transcriptData$學號==x,]->subsample 
  transcriptData %>%
    filter(學號==x) %>%
    mutate(
      及格=(學期成績>=60)
    ) %>%
    summarise(
      學號=學號[1],
      總修習學分數=sum(學分數),
      總實得學分數=sum(學分數[及格])
    ) -> finalResult
  return(finalResult)
}
```

```{r}
findGlobals(totalCredits2)
```


#####Exercise6

## 1. dplyr與期中考

期中考的題目在dplyr的應用下會變得相當直覺、簡單。先執行以下程式引入學生的課外活動調查**classSurvey**及作業成績**hwGrades**資料：
```{r data1}
library(readr)
classSurvey <- read_csv("https://raw.githubusercontent.com/tpemartin/github-data/master/classSurvey.csv")
hwGrades <- read_csv("https://raw.githubusercontent.com/tpemartin/github-data/master/hwGrades.csv")
```

## 1.1 mutate應用
使用`mutate()`一口氣在classSurvey裡完成以下幾件事（結果記得存回classSurvey）： 

  - 將classSurvey資料中的**性別**變數轉成factor class
    
  - 創造**入學年**變數（由**學號**的第2-4位字元產生）
    
  - 創造**團隊活動**Logic變數，TRUE表示有參與團隊活動，FALSE表示沒有（由**課外活動**變數產生）
    
```{r ans11}
classSurvey %>%
  mutate(
    性別=as.factor(性別),
    入學年=str_sub(學號,2,4),
    團隊活動=str_detect(課外活動,"團隊活動")
  ) -> classSurvey; classSurvey
```

```{r eval=FALSE}
classSurvey %>%
  mutate(
    性別=as.factor(性別),
    入學年=str_sub(學號,2,4),
    團隊活動=(課外活動=="團隊活動")#只有完全只參加團隊活動的會是T
  ) -> classSurvey1; classSurvey1
```

##Challenge
在transcriptData中，每周一第六節有課的人

## 1.2 group_by及summarise應用

從**classSurvey**中(1)使用**性別**進行樣本分群，並(2)在每個性別樣本下，計算

  - **人數**（hint: 除了課堂所學`nrow()`,`length()`等技巧，也可以直接寫`n()`，函裡頭不放東西則會回傳樣本的觀測值個數。）  
  - **參加團隊活動人數**（hint: 前一題classSurvey已產生**團隊活動**這個logic variable，把所有TRUE加起來就是答案。）  
  - **參加團隊活動比例**, 即**參加團隊活動人數**除以**人數**。   

這裡步驟(1)使用group_by；步驟(2)使用summarise   
  
```{r ans12}
classSurvey %>%
  group_by(性別) %>%
  summarise(
    人數=n(),
    參加團隊活動人數=sum(團隊活動),
    參加團隊活動比例=參加團隊活動人數/人數
  )
```



## 1.3 NA取代函數
在hwGrades裡hw1，hw2，Exercise3均有不少NA，我們要把成績依下列狀況成立與否而給與不同的值：

  - 若該值目前為NA，則值改成0；
    
  - 若該值目前不是NA，則維持原數值。
    
在R裡我們可以用`ifelse(邏輯條件, 為真時的回傳值, 為否的回傳值)`，例如以下的`is_hot()`函數，當輸入溫度大於30時會回"熱",反之回"宜人"：

```{r}
is_hot<- function(temperature){
  ifelse(temperature>30, "熱", "宜人")
}
is_hot(28)
is_hot(35)
```

創造一個函數叫`na2zero()`，當x為NA時`na2zero(x)=0`;而當x不為NA時，`na2zero(x)=x`，即
```
x<-NA
na2zero(x)=0
x<-3
na2zero(x)=3
```

```{r ans13}
na2zero <- function(x){
  ifelse(is.na(x),0,x)
}
```



## 1.4 NA處理 
例用na2zero函數，透過mutate將hwGrades三次作業NA成績均轉成0。(結果記得回存hwGrades) (對程式能力掌握好的同學我建議試著用`mutate_if()`來對所有numeric class變數(三次作業成績都是這個class)進行na2zero轉換。)

```{r ans14}
hwGrades %>%
  mutate(
    hw1=na2zero(hw1),
    hw2=na2zero(hw2),
    Exercise3=na2zero(Exercise3)
  ) -> hwGrades; hwGrades
```



```{r}
hwGrades %>%
  mutate_if(
    is.numeric,
    funs(
      na2zero
    )
  ) -> hwGrades; hwGrades
```

## 1.5 資料整併
classSurvey與hwGrades都存在對方所沒有的變數，共通點是他們都有**學號**。我們可透過**學號**將兩個資料併在一起，使用`dplyr::left_join()`。

以下說明取自`?left_join` ：有兩個data frames, 它們的共同變數為**name**
```{r}
band_members
```

```{r}
band_instruments
```

`left_join()`在`%>%`使用時會以`%>%`「左手邊」的data frame為主把右手邊多的資訊併進來。nrow會維持「左手邊」data frame nrow，合併只會增加新的變數資訊。

```{r}
band_members %>% 
  left_join(band_instruments,by=c("name"))
```

請以hwGrades為「左手邊」data frame把classSurvey的資訊合併進來。（結果請回存hwGrades）

```{r ans15}
hwGrades %>%
  left_join(
    classSurvey, by="學號"
  ) -> hwGrades; hwGrades
```


## 1.6 個人作業平均成績
使用整併完的hwGrades透過`mutate()`來計算每個人的**作業平均成績**。（結果請回存hwGrades）

```{r ans16}
hwGrades %>%
  group_by(性別) %>%
  mutate(
    作業平均成績=(hw1+hw2+Exercise3)/3
  ) -> hwGrades; hwGrades
```



## 1.7 性別與學業表現：男性
延續上題的hwGrades，請使用`group_by()`及`summarise()`來計算男/女性的**平均作業平均成績**。(結果還會出現性別NA組的平均)

```{r ans17}
hwGrades %>%
  group_by(性別) %>%
  summarise(
    平均作業平均成績=mean(作業平均成績)
  )
```



##Last part

```{r}
library(readr)
library(tidyr)
libraryData <- read_csv("https://raw.githubusercontent.com/tpemartin/github-data/master/libraryData2.csv")
libraryData %>%
  group_by(學院) %>%
  nest(.key="各院借閱資料") ->
  libraryDataNested
```
```{r}
libraryData %>%
  group_by(學號,學年) %>%
  summarise(
    學年總借閱冊數=n()
  ) -> libraryData2
```

```{r}
# 不保留 題（1）
libraryData %>%
  group_by(學號,讀者年級) %>%
  summarise(
    年級總借閱冊數=n()
  ) -> libraryData3

# 保留題（1）
libraryData %>%
  group_by(學號,學年) %>%
  mutate(
    學年總借閱冊數=n()
  ) %>%
  group_by(學號,讀者年級) %>%
  summarise(
    年級總借閱冊數=n(),
    學年總借閱冊數=學年總借閱冊數[1],
    學系=學系[1],
    學院=學院[1],
    學年=學年[1]
  ) -> libraryData3
```
```{r}
libraryData3%>%
  left_join(
    libraryData2,
    by="學號"
  ) ->libraryData4
```

