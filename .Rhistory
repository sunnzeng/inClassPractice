summarise(
總修習學分數=sum(學分數),
總實得學分數=sum(學分數[及格]
)
subsample%>%
mutate(
及格=(學期成績>=60)
)%>%
summarise(
總修習學分數=sum(學分數),
總實得學分數=sum(學分數[及格]
)
subsample %>%
mutate(
及格 = 學期成績 >= 60) -> subsample
subsample %>%
summarise(
總修習學分數=sum(學分數),
總實得學分數=sum(學分數[及格])
)
subsample %>%
mutate(
及格=(學期成績>=60)
) %>%
summarise(
總修習學分數=sum(學分數),
總實得學分數=sum(學分數[及格])
)
subsample%>%
mutate(
及格=(學期成績>=60)
)%>%
summarise(
總修習學分數=sum(學分數),
總實得學分數=sum(學分數[及格]
)
subsample%>%
mutate(
及格=(學期成績>=60)
)%>%
summarise(
總修習學分數=sum(學分數),
總實得學分數=sum(學分數[及格]
)
subsample %>%
mutate(
及格=(學期成績>=60)
) %>%
summarise(
總修習學分數=sum(學分數),
總實得學分數=sum(學分數[及格])
)
subsample%>%
mutate(
及格=(學期成績>=60)
)%>%
summarise(
總修習學分數=sum(學分數),
總實得學分數=sum(學分數[及格]
)
subsample %>%
subsample %>%
mutate(
及格=(學期成績>=60)
)%>%
summarise(
總修習學分數=sum(學分數),
總實得學分數=sum(學分數[及格]
)
subsample %>%
View(subsample)
subsample %>%
mutate(
及格=(學期成績>=60)
) %>%
summarise(
總修習學分數=sum(學分數),
總實得學分數=sum(學分數[及格])
)
總修習學分數=sum(學分數),
subsample %>%
總修習學分數=sum(學分數),
subsample %>%
mutate(
及格=(學期成績>=60)
) %>%
summarise(
總修習學分數=sum(學分數),
總實得學分數=sum(學分數[及格])
)
subsample %>%
mutate(
及格=(學期成績>=60)
) %>%
summarise(
總修習學分數=sum(學分數),
總實得學分數=sum(學分數[及格])
)
subsample %>%
mutate(
及格=(學期成績>=60)
) %>%
summarise(
學號=[1]
subsample %>%
mutate(
及格=(學期成績>=60)
) %>%
summarise(
學號=[1],
subsample %>%
mutate(
及格=(學期成績>=60)
) %>%
summarise(
學號=[1],
subsample %>%
mutate(
及格=(學期成績>=60)
) %>%
summarise(
學號=學號[1],
總修習學分數=sum(學分數),
總實得學分數=sum(學分數[及格])
)
totalCredits <- function(x){
transcriptData[transcriptData$"學號" == x,]->subsample
subsample %>%
mutate(
及格=(學期成績>=60)
) %>%
summarise(
學號=學號[1],
總修習學分數=sum(學分數),
總實得學分數=sum(學分數[及格])
)
}
transcriptData$"系別" <- str_sub(transcriptData$"學號",5,6)
transcriptData%>%
filter(學年==100,學期==1,`必選修類別（必∕選∕通）`=="通")%>%
unique()->通識科目總表1
(transcriptData$學年==100 &
transcriptData$學期==1 &
transcriptData$`必選修類別（必∕選∕通）`=="通") -> filteredLogiIndex
transcriptData[filteredLogiIndex,]$科目名稱 %>% unique -> 通識科目總表
(transcriptData$學年==100 &
transcriptData$學期==1 &
transcriptData$`必選修類別（必∕選∕通）`=="通") -> filteredLogiIndex
transcriptData[filteredLogiIndex,]$科目名稱 %>% unique -> 通識科目總表
View(通識科目總表1)
View(通識科目總表1)
View(通識科目總表1)
transcriptData[filteredLogiIndex,]$科目名稱 %>% unique -> 通識科目總表
通識科目總表
transcriptData$科目名稱%>%
filter(學年==100,學期==1,`必選修類別（必∕選∕通）`=="通")%>%
unique()->通識科目總表1
transcriptData%>%
filter(學年==100,學期==1,`必選修類別（必∕選∕通）`=="通")%>%
unique(科目名稱)->通識科目總表1
View(transcriptData)
transcriptData%>%
filter(學年==100,學期==1,`必選修類別（必∕選∕通）`=="通")%>%
unique(科目名稱)->通識科目總表1
transcriptData%>%
filter(學年==100,學期==1,`必選修類別（必∕選∕通）`=="通")%>%
unique()->通識科目總表1
View(通識科目總表1)
transcriptData$科目名稱[學年==100,學期==1,`必選修類別（必∕選∕通）`=="通"]%>%
unique()->通識科目總表1
transcriptData$科目名稱[transcriptData$學年==100,transcriptData$學期==1,transcriptData$`必選修類別（必∕選∕通）`=="通"]%>%
unique()->通識科目總表1
transcriptData[transcriptData$學年==100,transcriptData$學期==1,transcriptData$`必選修類別（必∕選∕通）`=="通"]$科目名稱%>%
unique()->通識科目總表1
transcriptData[transcriptData$學年==100&transcriptData$學期==1&transcriptData$`必選修類別（必∕選∕通）`=="通",]$科目名稱%>%
unique()->通識科目總表1
(transcriptData$學年==100 &
transcriptData$學期==1 &
transcriptData$`必選修類別（必∕選∕通）`=="通") -> filteredLogiIndex
transcriptData$科目名稱[filteredLogiIndex,] %>% unique -> 通識科目總表
(transcriptData$學年==100 &
transcriptData$學期==1 &
transcriptData$`必選修類別（必∕選∕通）`=="通") -> filteredLogiIndex
transcriptData[filteredLogiIndex,]$科目名稱 %>% unique -> 通識科目總表
通識科目總表
transcriptData[transcriptData$學年==100&transcriptData$學期==1&transcriptData$`必選修類別（必∕選∕通）`=="通",]$科目名稱%>%
unique()->通識科目總表1
a <- transcriptData$`必選修類別（必∕選∕通）`== "通"
b <- transcriptData$學年 == 100
c <- transcriptData$學期 == 1
"通識科目總表" <- unique(transcriptData[a&b&c,]$"科目名稱")
通識科目總表
(transcriptData$學年==100 &
transcriptData$學期==1 &
transcriptData$`必選修類別（必∕選∕通）`=="通") -> filteredLogiIndex
transcriptData[filteredLogiIndex,]$科目名稱 %>% unique -> 通識科目總表
shannon1 <- function(x){
table(x)/sum(table(x))->p
-sum(p*log(p))->shannonIndex1
return(shannonIndex1
}
shannon1 <- function(x){
table(x)/sum(table(x))->p
-sum(p*log(p))->shannonIndex1
return(shannonIndex1)
}
transcriptData[transcriptData$學年==104&
transcriptData$學期==1&
transcriptData$科目名稱=="ZT13",]$系別%>%shannon1()
(transcriptData$學年==104 &
transcriptData$學期==1 & transcriptData$科目名稱=="ZT13") -> filteredLogiIndex
transcriptData$系別[filteredLogiIndex] %>% shannon
shannon3 <- function(x){
table(x)/length(x)%>%
-sum(.*log(.))
}
shannon3 <- function(x){
table(x)/length(x)%>%
-sum(.*log(.))->shannonIndex3
return(shannonIndex3)
}
index <- transcriptData$"系別"[transcriptData$"科目名稱" == "ZT13"&
transcriptData$"學年" == 104&
transcriptData$"學期" == 1]
shannon3(index)
shannon3 <- function(x){
table(x)/sum(x)%>%
-sum(.*log(.))->shannonIndex3
return(shannonIndex3)
}
index <- transcriptData$"系別"[transcriptData$"科目名稱" == "ZT13"&
transcriptData$"學年" == 104&
transcriptData$"學期" == 1]
shannon3(index)
shannon3 <- function(x){
table(x)/length(x)%>%
-sum(.*log(.))->shannonIndex3
return(shannonIndex3)
}
index <- transcriptData$"系別"[transcriptData$"科目名稱" == "ZT13"&
transcriptData$"學年" == 104&
transcriptData$"學期" == 1]
shannon3(index)
transcriptData%>%
filter(學年==100,學期==1,`必選修類別（必∕選∕通）`=="通")->a%>%
科目名稱[a,]%>%
unique
library(readr)
libraryData <- read_csv("https://raw.githubusercontent.com/tpemartin/github-data/master/library100_102.csv")
library(readr); library(dplyr); library(stringr); library(lubridate)
library(readr)
libraryData <- read_csv("https://raw.githubusercontent.com/tpemartin/github-data/master/library100_102.csv")
libraryData%>%
mutate(
學院=as.factor(學院),
書籍館藏地=as.factor(書籍館藏地),
書籍類別=as.factor(書籍類別),
借閱時間=ymd_hms(借閱時間,tz="Asia/Taipei")
)
libraryData%>%
mutate(
學院=as.factor(學院),
書籍館藏地=as.factor(書籍館藏地),
書籍類別=as.factor(書籍類別),
借閱時間=ymd_hms(借閱時間,tz="Asia/Taipei")
)->libraryData
## 1
max(libraryData$讀者借閱冊數)-> maxNumber
min(libraryData$讀者借閱冊數)-> minNumber
paste0("最大值： ",maxNumber, " 最小值： ",minNumber)
## 2
max(libraryData$入學年)-> maxNumber
min(libraryData$入學年)-> minNumber
paste0("最大值： ",maxNumber, " 最小值： ",minNumber)
## 3
max(libraryData$書籍上架年月)-> maxNumber
min(libraryData$書籍上架年月)-> minNumber
paste0("最大值： ",maxNumber, " 最小值： ",minNumber)
minMaxFun <- function(x){
max(x)->maxNumber
min(x)->minNumber
paste0("最大值：",maxNumber,"最小值：",minNumber)
}
minMaxFun(libraryData$讀者借閱冊數)
minMaxFun(libraryData$入學年)
minMaxFun(libraryData$書籍上架年月)
libraryData %>%
select(讀者借閱冊數,書籍出版日期)
libraryData %>%
select(讀者借閱冊數,書籍出版日期) %>%
summarise(
讀者平均借閱冊數=mean(讀者借閱冊數),
最小書籍出版日期=min(書籍出版日期),
最大書籍出版日期=max(書籍出版日期)
)
libraryData %>%
select(讀者借閱冊數,書籍出版日期) %>%
summarise(
讀者平均借閱冊數=mean(讀者借閱冊數),
最小書籍出版日期=min(書籍出版日期,na.rm=T),
最大書籍出版日期=max(書籍出版日期,na.rm=T)
)
library(summarytools)
libraryData %>%
select_if(
is.numeric
) %>% summarytools::dfSummary() %>% summarytools::view(.)
library(summarytools)
libraryData %>%
select_if(
not_numeric
) %>% summarytools::dfSummary() %>% summarytools::view(.)
(libraryData$書籍出版日期==9999) -> logiIndex # 回傳每筆書籍出版日期是否為9999
libraryData$書籍出版日期[logiIndex] <-  # 選出為9999的樣本
NA # 將它換成NA
(libraryData$書籍出版日期==9999) -> logiIndex # 回傳每筆書籍出版日期是否為9999
libraryData$書籍出版日期[which(logiIndex)] <-  # 選出為9999的樣本
NA # 將它換成NA
library(readr)
libraryData <- read_csv("https://raw.githubusercontent.com/tpemartin/github-data/master/library100_102.csv")
libraryData%>%
mutate(
學院=as.factor(學院),
書籍館藏地=as.factor(書籍館藏地),
書籍類別=as.factor(書籍類別),
借閱時間=ymd_hms(借閱時間,tz="Asia/Taipei")
)->libraryData
libraryData%>%
levels()->storageLocations
libraryData$書籍類別%>%
levels()->storageLocations
libraryData$書籍類別%>%
levels()->storageLocations
storageLocations
i<-1
# 1第i個館藏地的值是什麼？
storageLocation_i <- storageLocations[i]
# 2如何選出符合i館藏地要求的資料？
numericalIndexForSubsample<-which(libraryData$書籍館藏地==storageLocation_i)
subsample_i <- libraryData[numericalIndexForSubsample,]
# 3選出上述的子樣本後要如何算出
borrowCount_i <- nrow(subsample_i)
View(subsample_i)
libraryData$書籍類別%>%
levels()->storageLocations
storageLocations
library(readr)
libraryData <- read_csv("https://raw.githubusercontent.com/tpemartin/github-data/master/library100_102.csv")
libraryData$書籍類別%>%
as.factor()%>%
levels()->storageLocations
storageLocations
libraryData$書籍館藏地%>%
as.factor()%>%
levels()->storageLocations
storageLocations
i<-1
# 1第i個館藏地的值是什麼？
storageLocation_i <- storageLocations[i]
# 2如何選出符合i館藏地要求的資料？
numericalIndexForSubsample<-which(libraryData$書籍館藏地==storageLocation_i)
subsample_i <- libraryData[numericalIndexForSubsample,]
# 3選出上述的子樣本後要如何算出
borrowCount_i <- nrow(subsample_i)
allBorrowCount <- vector("numeric",18)
for (i in seq_along(storageLocations)) {
# 1
storageLocation_i <- storageLocations[i]
# 2
numericalIndexForSubsample<-which(libraryData$書籍館藏地==storageLocation_i)
subsample_i <- libraryData[numericalIndexForSubsample,]
# 3
borrowCount_i <- nrow(subsample_i)
# 4
allBorrowCount[[i]]<-borrowCount_i
}
View(subsample_i)
View(subsample_i)
libraryData$學院 %>%
as.factor()%>%
levels()->borrow
View(libraryData)
libraryData$學院 %>%
as.factor()%>%
levels()->borrow
allBorrowCount1 <- vector("numeric",6)
for (i in seq_along(borrow)) {
borrowCollege_i <- borrow[i]
collegesubsample <- which(libraryData$讀者借閱冊數 == borrowCollege_i)
collegesubsample_i <- libraryData[collegesubsample,]
collegeCount_i <- nrow(collegesubsample_i)
allBorrowCount1[[i]] <- collegeCount_i
}
View(collegesubsample_i)
knitr::opts_chunk$set(echo = TRUE)
library(readr); library(dplyr); library(stringr); library(lubridate)
library(readr)
libraryData <- read_csv("https://raw.githubusercontent.com/tpemartin/github-data/master/library100_102.csv")
libraryData$"???Њ??U?n" <- as.factor(libraryData$"???Њ??U?n")
library(readr)
libraryData <- read_csv("https://raw.githubusercontent.com/tpemartin/github-data/master/library100_102.csv")
libraryData$學院 %>%
as.factor()%>%
levels()->borrow
allBorrowCount1 <- vector("numeric",6)
for (i in c(1:6)) {
borrowCollege_i <- borrow[i]
collegesubsample <- which(libraryData$讀者借閱冊數 == borrowCollege_i)
collegesubsample_i <- libraryData[collegesubsample,]
collegeCount_i <- nrow(collegesubsample_i)
allBorrowCount1[[i]] <- collegeCount_i
}
View(collegesubsample_i)
libraryData$學院 %>%
as.factor()%>%
levels()->borrow
allBorrowCount1 <- vector("numeric",6)
for (i in c(1:6)) {
borrowCollege_i <- borrow[i]
collegesubsample <- which(libraryData$學院 == borrowCollege_i)
collegesubsample_i <- libraryData[collegesubsample,]
collegeCount_i <- nrow(collegesubsample_i)
allBorrowCount1[[i]] <- collegeCount_i
}
libraryData %>%
group_by(書籍館藏地) %>% # 依書籍館藏地不同形成不同subsample_i
summarise(
borrowCount=n() #每個subsample_i計算 borrowCount=nrow(subsample_i)
) -> result
result
libraryData%>%
group_by(學院)%>%
summarise(
borrowCountCollege=n()
)->result1
result1
libraryData %>%
group_by(學院,入學年) %>%
summarise(
borrowCount=length(學號)
) -> result2
result2
libraryData %>%
group_by(學院,入學年) %>%
summarise(
borrowCount=n()
) -> result2
result2
libraryData %>%
group_by(學院,入學年) %>%
summarise(
borrowCount=length(學號)
) -> result2
result2
libraryData%>%
group_by(學號)%>%
summarise(
borrowCount=n()
)->result3
result3
libraryData%>%
group_by(學號,學期)%>%
summarise(
borrowCount=n()
)->result4
View(libraryData)
libraryData %>%
filter(入學年==100, 學院=="社會科學院")
libraryData %>%
filter(between(入學年,100,102), 學院=="社會科學院")
a<-c(1:10)
typeof(a)
b<-list("a","b",1:10)
typeof(b)
b2<-list("a","b",1:10,
list(
"Mr Smith",
data.frame(
v1=c(1,2),
v2=c("aa","bb"),
stringsAsFactors = F
)
))
library(readr)
filmVotingData <- read_csv("https://raw.githubusercontent.com/tpemartin/course-107-1-programming-for-data-science/master/data/%E7%AC%AC%E4%B8%89%E5%B1%86%E7%B6%93%E6%BF%9F%E6%92%AD%E5%AE%A2%E7%AB%B6%E8%B3%BD%E5%8F%83%E8%B3%BD%E4%BD%9C%E5%93%81%E6%8A%95%E7%A5%A8%E7%B5%90%E6%9E%9C%E6%A8%A3%E6%9C%AC%20-%20Sheet1.csv")
filmVotingData$請選擇你最喜歡的影片二部 %>%
str_split(", (?!(by))") -> filmVotingResult
#filmVotingResult
View(filmVotingResult)
filmVotingResult %>% unlist
plasticContainer <- list(
greenBox=c("paper","scissor"),     # location 1
redBox=c(1L,3L,2.5),               # location 2
blueBox=c(TRUE,FALSE,TRUE,TRUE)    # location 3
)
plasticContainer[c("greenBox","redBox")] # or plasticContainer[c(1,2)]
plasticContainer[c("greenBox")] # or plasticContainer[c(1,2)]
plasticContainer[["greenBox"]] # or plasticContainer[[1]]
plasticContainer$greenBox
plasticContainer[c("greenBox")]$greenBox[1] # or plasticContainer[c(1,2)]
plasticContainer[c("greenBox")]# or plasticContainer[c(1,2)]
plasticContainer[c("greenBox")]$greenBox[1]
plasticContainer[["greenBox"]] # or plasticContainer[[1]]
plasticContainer[["greenBox"]][1]
plasticContainer$greenBox
plasticContainer$greenBox[1]
download.file("https://github.com/tpemartin/github-data/blob/master/plotly_4070_neda.Rda?raw=true",destfile = "plotly_4070_neda.Rda")
load("plotly_4070_neda.Rda")
load("plotly_4070_neda.Rda")
library(plotly)
load("plotly_4070_neda.Rda")
download.file("https://github.com/tpemartin/github-data/blob/master/plotly_4070_neda.Rda?raw=true",destfile = "plotly_4070_neda.Rda")
